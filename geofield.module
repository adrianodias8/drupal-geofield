<?php

/**
 * @TODO: Provide function/method to determine version.
 */

require_once('geofield.elements.inc');

/* *
 * Max length of geohashes (imposed by database column length).
 */
define('GEOFIELD_GEOHASH_LENGTH', 16);

/**
 * Diameter of the Earth in kilometers.
 */
define('GEOFIELD_KILOMETERS', 6371);

/**
 * Diameter of the Earth in meters.
 */
define('GEOFIELD_METERS', 6371000);

/**
 * Diameter of the Earth in miles.
 */
define('GEOFIELD_MILES', 3959);

/**
 * Diameter of the Earth in yards.
 */
define('GEOFIELD_YARDS', 6975175);

/**
 * Diameter of the Earth in feet.
 */
define('GEOFIELD_FEET', 20925525);

/**
 * Diameter of the Earth in nautical miles.
 */
define('GEOFIELD_NAUTICAL_MILES', 3444);

/**
 * Implements hook_field_validate().
 * @TODO: No longer called, need a Constraint instead. Leaving code for example implementation, check
 *   link module for how to create constraint.
 */
function geofield_field_validate(EntityInterface $entity = NULL, $field, $instance, $langcode, $items, &$errors) {
  Drupal::service('geophp');

  foreach ($items as $delta => $item) {
    if (empty($item['value'])) {
      return FALSE;
    }

    // @TODO: Not sure if this try/catch is still necessary. geoPHP use to throw exceptions with bad geoms,
    // but no longer seems to do so. Not sure if I like that or not... /Brandonian
    $error = FALSE;
    try {
      $value = geoPHP::load($item['value']);
      if (empty($value)) {
        $error = TRUE;
      }
    }
    catch (Exception $e) {
      $error = TRUE;
    }

    if ($error === TRUE) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'geofield_data_faulty',
        'message' => t('%name: Specified location data is invalid.', array('%name' => $instance['label'])),
      );
    }
  }

  return $errors;
}
