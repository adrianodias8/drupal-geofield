<?php

/**
 * @TODO: Provide function/method to determine version.
 */

require_once('geofield.elements.inc');

/* *
 * Max length of geohashes (imposed by database column length).
 */
define('GEOFIELD_GEOHASH_LENGTH', 16);

/**
 * Diameter of the Earth in kilometers.
 */
define('GEOFIELD_KILOMETERS', 6371);

/**
 * Diameter of the Earth in meters.
 */
define('GEOFIELD_METERS', 6371000);

/**
 * Diameter of the Earth in miles.
 */
define('GEOFIELD_MILES', 3959);

/**
 * Diameter of the Earth in yards.
 */
define('GEOFIELD_YARDS', 6975175);

/**
 * Diameter of the Earth in feet.
 */
define('GEOFIELD_FEET', 20925525);

/**
 * Diameter of the Earth in nautical miles.
 */
define('GEOFIELD_NAUTICAL_MILES', 3444);

/**
 * Implements hook_field_validate().
 * @TODO: At some point, this hook will probably turn into a method on the field controller class.
 */
function geofield_field_validate(EntityInterface $entity = NULL, $field, $instance, $langcode, $items, &$errors) {
  Drupal::service('geophp');

  foreach ($items as $delta => $item) {
    if (empty($item['value'])) {
      return FALSE;
    }

    // @TODO: Not sure if this try/catch is still necessary. geoPHP use to throw exceptions with bad geoms,
    // but no longer seems to do so. Not sure if I like that or not... /Brandonian
    $error = FALSE;
    try {
      $value = geoPHP::load($item['value']);
      if (empty($value)) {
        $error = TRUE;
      }
    }
    catch (Exception $e) {
      $error = TRUE;
    }

    if ($error === TRUE) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'geofield_data_faulty',
        'message' => t('%name: Specified location data is invalid.', array('%name' => $instance['label'])),
      );
    }
  }

  return $errors;
}

/**
 * Implements hook_field_presave().
 *  - There's a decent chance this hook will go away in favor of a method on the field item class.
 */
function geofield_field_presave($entity, $field, $instance, $langcode, &$items) {
  $field_info = $instance->getField();
  $geofield_name = $field_info->id;

  // @TODO: actually check field settings ($field['settings']['backend'])
  $backendPlugin = \Drupal::service('plugin.manager.geofield_backend')->createInstance('geofield_backend_default');

  $field = $entity->get($geofield_name);

  foreach ($items as $delta => $item) {
    // @TODO: There must be a better way to do this. :-(
    $items[$delta]['value'] = $backendPlugin->save($field->offsetGet($delta)->get('value')->getValue());
    $items[$delta]['geo_type'] = $field->offsetGet($delta)->get('geo_type')->getValue();
    $items[$delta]['lat'] = $field->offsetGet($delta)->get('lat')->getValue();
    $items[$delta]['lon'] = $field->offsetGet($delta)->get('lon')->getValue();
    $items[$delta]['left'] = $field->offsetGet($delta)->get('left')->getValue();
    $items[$delta]['top'] = $field->offsetGet($delta)->get('top')->getValue();
    $items[$delta]['right'] = $field->offsetGet($delta)->get('right')->getValue();
    $items[$delta]['bottom'] = $field->offsetGet($delta)->get('bottom')->getValue();
    $items[$delta]['geohash'] = $field->offsetGet($delta)->get('geohash')->getValue();
  }
}
